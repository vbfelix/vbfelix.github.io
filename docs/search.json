[
  {
    "objectID": "posts/2023-01-14-settlers-of-catan/index.html",
    "href": "posts/2023-01-14-settlers-of-catan/index.html",
    "title": "An analysis of Settlers of Catan",
    "section": "",
    "text": "In this post of the series An analysis of, I’ll create a data analysis of my favorite board game, Settlers of Catan."
  },
  {
    "objectID": "posts/2023-01-14-settlers-of-catan/index.html#import-data",
    "href": "posts/2023-01-14-settlers-of-catan/index.html#import-data",
    "title": "An analysis of Settlers of Catan",
    "section": "Import data",
    "text": "Import data\n\ncatan_or <- read.csv(\"catanstats.csv\")\n\ncatan_or %>% glimpse()\n\nRows: 200\nColumns: 36\n$ gameNum         <int> 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, ~\n$ player          <int> 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, ~\n$ points          <int> 5, 9, 10, 5, 10, 6, 4, 9, 5, 10, 7, 7, 7, 10, 9, 9, 8,~\n$ me              <int> NA, 1, NA, NA, NA, NA, 1, NA, NA, NA, 1, NA, NA, 1, NA~\n$ X2              <int> 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, ~\n$ X3              <int> 3, 3, 3, 3, 6, 6, 6, 6, 3, 3, 3, 3, 6, 6, 6, 6, 3, 3, ~\n$ X4              <int> 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 7, 7, ~\n$ X5              <int> 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 12, 12, 12, 12~\n$ X6              <int> 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 14, 14, 14~\n$ X7              <int> 10, 10, 10, 10, 8, 8, 8, 8, 4, 4, 4, 4, 20, 20, 20, 20~\n$ X8              <int> 6, 6, 6, 6, 14, 14, 14, 14, 5, 5, 5, 5, 12, 12, 12, 12~\n$ X9              <int> 7, 7, 7, 7, 9, 9, 9, 9, 5, 5, 5, 5, 11, 11, 11, 11, 9,~\n$ X10             <int> 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 4, 4, 4, 4, 3, 3, ~\n$ X11             <int> 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, ~\n$ X12             <int> 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, ~\n$ settlement1     <int> 6, 5, 5, 6, 6, 5, 5, 4, 5, 5, 6, 5, 5, 6, 9, 5, 6, 5, ~\n$ X               <chr> \"L\", \"W\", \"S\", \"O\", \"W\", \"C\", \"C\", \"C\", \"L\", \"W\", \"S\",~\n$ X.1             <int> 3, 8, 6, 9, 9, 8, 6, 9, 4, 8, 9, 6, 6, 9, 10, 9, 9, 6,~\n$ X.2             <chr> \"C\", \"O\", \"S\", \"L\", \"O\", \"S\", \"W\", \"W\", \"L\", \"O\", \"W\",~\n$ X.3             <int> 11, 10, 12, 3, 10, 10, 11, 11, 10, 10, 3, 11, 11, 3, 1~\n$ X.4             <chr> \"C\", \"W\", \"W\", \"L\", \"O\", \"O\", \"O\", \"O\", \"C\", \"C\", \"L\",~\n$ settlement2     <int> 9, 4, 8, 4, 8, 8, 5, 6, 6, 4, 8, 8, 8, 5, 4, 8, 8, 5, ~\n$ X.5             <chr> \"L\", \"L\", \"O\", \"L\", \"W\", \"W\", \"C\", \"L\", \"W\", \"L\", \"O\",~\n$ X.6             <int> 10, 5, 4, 8, 10, 4, 9, 4, 3, 9, 10, 4, 3, 8, 8, 4, 10,~\n$ X.7             <chr> \"W\", \"S\", \"S\", \"L\", \"L\", \"L\", \"W\", \"C\", \"L\", \"W\", \"C\",~\n$ X.8             <int> 11, 11, 3, 10, 0, 3, 10, 3, 11, 11, 0, 3, 0, 10, 10, 3~\n$ X.9             <chr> \"O\", \"O\", \"C\", \"S\", \"2L\", \"W\", \"L\", \"S\", \"S\", \"S\", \"3G~\n$ production      <int> 38, 48, 44, 42, 60, 57, 44, 61, 44, 41, 47, 53, 64, 97~\n$ tradeGain       <int> 5, 8, 14, 12, 15, 12, 10, 16, 5, 4, 6, 2, 15, 21, 18, ~\n$ robberCardsGain <int> 2, 6, 9, 0, 16, 1, 8, 11, 5, 9, 5, 2, 12, 15, 7, 8, 5,~\n$ totalGain       <int> 45, 62, 67, 54, 91, 70, 62, 88, 54, 54, 58, 57, 91, 13~\n$ tradeLoss       <int> 10, 11, 24, 24, 28, 26, 18, 25, 11, 8, 10, 4, 23, 47, ~\n$ robberCardsLoss <int> 2, 1, 4, 6, 10, 6, 6, 6, 1, 3, 7, 4, 5, 15, 5, 19, 11,~\n$ tribute         <int> 4, 8, 0, 0, 0, 8, 8, 4, 9, 0, 0, 8, 12, 10, 0, 0, 0, 4~\n$ totalLoss       <int> 16, 20, 28, 30, 38, 40, 32, 35, 21, 11, 17, 16, 40, 72~\n$ totalAvailable  <int> 29, 42, 39, 24, 53, 30, 30, 53, 33, 43, 41, 41, 51, 61~"
  },
  {
    "objectID": "posts/2023-01-14-settlers-of-catan/index.html#renaming-variables",
    "href": "posts/2023-01-14-settlers-of-catan/index.html#renaming-variables",
    "title": "An analysis of Settlers of Catan",
    "section": "Renaming variables",
    "text": "Renaming variables\n\ncatan_df <-\n  catan_or %>% \n  select(\n    dice_02 = X2,\n    dice_03 = X3,\n    dice_04 = X4,\n    dice_05 = X5,\n    dice_06 = X6,\n    dice_07 = X7,\n    dice_08 = X8,\n    dice_09 = X9,\n    dice_10 = X10,\n    dice_11 = X11,\n    dice_12 = X12,\n    set1_l1_num = settlement1,\n    set1_l1_res = X,\n    set1_l2_num = X.1,\n    set1_l2_res = X.2,\n    set1_l3_num = X.3,\n    set1_l3_res = X.4,\n    set2_l1_num = settlement2,\n    set2_l1_res = X5,\n    set2_l2_num = X.6,\n    set2_l2_res = X.7,\n    set2_l3_num = X.8,\n    set2_l3_res = X.9\n  )\n\ncatan_df %>% glimpse()\n\nRows: 200\nColumns: 23\n$ dice_02     <int> 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1~\n$ dice_03     <int> 3, 3, 3, 3, 6, 6, 6, 6, 3, 3, 3, 3, 6, 6, 6, 6, 3, 3, 3, 3~\n$ dice_04     <int> 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 7, 7, 7, 7~\n$ dice_05     <int> 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 12, 12, 12, 12, 9,~\n$ dice_06     <int> 7, 7, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 14, 14, 14, 14~\n$ dice_07     <int> 10, 10, 10, 10, 8, 8, 8, 8, 4, 4, 4, 4, 20, 20, 20, 20, 14~\n$ dice_08     <int> 6, 6, 6, 6, 14, 14, 14, 14, 5, 5, 5, 5, 12, 12, 12, 12, 9,~\n$ dice_09     <int> 7, 7, 7, 7, 9, 9, 9, 9, 5, 5, 5, 5, 11, 11, 11, 11, 9, 9, ~\n$ dice_10     <int> 3, 3, 3, 3, 3, 3, 3, 3, 6, 6, 6, 6, 4, 4, 4, 4, 3, 3, 3, 3~\n$ dice_11     <int> 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2~\n$ dice_12     <int> 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1~\n$ set1_l1_num <int> 6, 5, 5, 6, 6, 5, 5, 4, 5, 5, 6, 5, 5, 6, 9, 5, 6, 5, 6, 5~\n$ set1_l1_res <chr> \"L\", \"W\", \"S\", \"O\", \"W\", \"C\", \"C\", \"C\", \"L\", \"W\", \"S\", \"L\"~\n$ set1_l2_num <int> 3, 8, 6, 9, 9, 8, 6, 9, 4, 8, 9, 6, 6, 9, 10, 9, 9, 6, 4, ~\n$ set1_l2_res <chr> \"C\", \"O\", \"S\", \"L\", \"O\", \"S\", \"W\", \"W\", \"L\", \"O\", \"W\", \"W\"~\n$ set1_l3_num <int> 11, 10, 12, 3, 10, 10, 11, 11, 10, 10, 3, 11, 11, 3, 11, 1~\n$ set1_l3_res <chr> \"C\", \"W\", \"W\", \"L\", \"O\", \"O\", \"O\", \"O\", \"C\", \"C\", \"L\", \"S\"~\n$ set2_l1_num <int> 9, 4, 8, 4, 8, 8, 5, 6, 6, 4, 8, 8, 8, 5, 4, 8, 8, 5, 9, 4~\n$ set2_l1_res <int> 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 12, 12, 12, 12, 9,~\n$ set2_l2_num <int> 10, 5, 4, 8, 10, 4, 9, 4, 3, 9, 10, 4, 3, 8, 8, 4, 10, 9, ~\n$ set2_l2_res <chr> \"W\", \"S\", \"S\", \"L\", \"L\", \"L\", \"W\", \"C\", \"L\", \"W\", \"C\", \"C\"~\n$ set2_l3_num <int> 11, 11, 3, 10, 0, 3, 10, 3, 11, 11, 0, 3, 0, 10, 10, 3, 0,~\n$ set2_l3_res <chr> \"O\", \"O\", \"C\", \"S\", \"2L\", \"W\", \"L\", \"S\", \"S\", \"S\", \"3G\", \"~"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "An analysis of\n\n\n\n\n\n\n\n\n\n\n\nJan 14, 2023\n\n\nVinícius Félix\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\nIntro to\n\n\nTools\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nJan 10, 2023\n\n\nVinícius Félix\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\nIntro to\n\n\nTheory\n\n\nDataViz\n\n\n\n\n\n\n\n\n\n\n\nJan 7, 2023\n\n\nVinícius Félix\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\nIntro to\n\n\nTheory\n\n\nHypothesis test\n\n\n\n\n\n\n\n\n\n\n\nJan 1, 2023\n\n\nVinícius Félix\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\nIntro to\n\n\nTools\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nJan 1, 2023\n\n\nVinícius Félix\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2023-01-10-tidyverse-operators/index.html",
    "href": "posts/2023-01-10-tidyverse-operators/index.html",
    "title": "An intro to tidyverse operators",
    "section": "",
    "text": "In this post of the series Intro to, I’ll give an introduction to the tidyverse operators and how we can make functions with them."
  },
  {
    "objectID": "posts/2023-01-10-tidyverse-operators/index.html#curly-curly",
    "href": "posts/2023-01-10-tidyverse-operators/index.html#curly-curly",
    "title": "An intro to tidyverse operators",
    "section": "{{}} Curly-curly",
    "text": "{{}} Curly-curly\nThe first operator we will learn is the curly-curly, using the command {{}}, the goal of this operator is to allow us to have an argument passed to our function refering to a column inside a dataframe.\nSo, we will create the function penguin_summary, where the variable used to count the penguins, in the example before species, we will be generalized ny the argument grp_var.\n\npenguin_summary <- function(grp_var){\n  penguins %>% \n  filter(!is.na(sex)) %>% \n  group_by({{grp_var}},sex) %>%\n  summarise(\n    n = n(),\n    mean_body_mass_g = mean(body_mass_g,na.rm = TRUE)\n    ) %>% \n  group_by({{grp_var}}) %>% \n  mutate(p = n/sum(n,na.rm = TRUE))\n}\n\nWe can see that inside the dplyr verbs we write the argument grp_var inside the operator {{}}.\nLet’s now apply the variable species to see if the result is the same as before.\n\npenguin_summary(grp_var = species)\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 6 x 5\n# Groups:   species [3]\n  species   sex        n mean_body_mass_g     p\n  <fct>     <fct>  <int>            <dbl> <dbl>\n1 Adelie    female    73            3369. 0.5  \n2 Adelie    male      73            4043. 0.5  \n3 Chinstrap female    34            3527. 0.5  \n4 Chinstrap male      34            3939. 0.5  \n5 Gentoo    female    58            4680. 0.487\n6 Gentoo    male      61            5485. 0.513\n\n\nYes! We got the same result, but there are is also another interesting fact, the variable species was passed without quotes, so no need to use functions such as quo, enquote, etc. And now we can pass other variable to our function, let’s give it a try.\n\npenguin_summary(grp_var = island)\n\n`summarise()` has grouped output by 'island'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 6 x 5\n# Groups:   island [3]\n  island    sex        n mean_body_mass_g     p\n  <fct>     <fct>  <int>            <dbl> <dbl>\n1 Biscoe    female    80            4319. 0.491\n2 Biscoe    male      83            5105. 0.509\n3 Dream     female    61            3446. 0.496\n4 Dream     male      62            3987. 0.504\n5 Torgersen female    24            3396. 0.511\n6 Torgersen male      23            4035. 0.489\n\n\nOk, after generalizing the species variable, we will do the same for the body_mass_g creating another argument, num_var.\n\npenguin_summary <- function(grp_var,num_var){\n  penguins %>% \n  filter(!is.na(sex)) %>% \n  group_by({{grp_var}},sex) %>%\n  summarise(\n    n = n(),\n    mean = mean({{num_var}},na.rm = TRUE)\n    ) %>% \n  group_by({{grp_var}}) %>% \n  mutate(p = n/sum(n,na.rm = TRUE))\n}\n\npenguin_summary(grp_var = species,num_var = body_mass_g)\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 6 x 5\n# Groups:   species [3]\n  species   sex        n  mean     p\n  <fct>     <fct>  <int> <dbl> <dbl>\n1 Adelie    female    73 3369. 0.5  \n2 Adelie    male      73 4043. 0.5  \n3 Chinstrap female    34 3527. 0.5  \n4 Chinstrap male      34 3939. 0.5  \n5 Gentoo    female    58 4680. 0.487\n6 Gentoo    male      61 5485. 0.513\n\n\nOkay, we kind of succeeded, but we had to give the new variable for the mean a generic name; to make this dynamic, we’ll need the assistance of another operator."
  },
  {
    "objectID": "posts/2023-01-10-tidyverse-operators/index.html#walrus",
    "href": "posts/2023-01-10-tidyverse-operators/index.html#walrus",
    "title": "An intro to tidyverse operators",
    "section": ":= Walrus",
    "text": ":= Walrus\nThe second operator is the walrus, using the command :=, the goal of this the operator is to allow us to create new variables using the argument dynamically in the name of the variable created.\n\npenguin_summary <- function(grp_var,num_var){\n  penguins %>% \n  filter(!is.na(sex)) %>% \n  group_by({{grp_var}},sex) %>%\n  summarise(\n    n = n(),\n    \"mean_{{num_var}}\" := mean({{num_var}},na.rm = TRUE)\n    ) %>% \n  group_by({{grp_var}}) %>% \n  mutate(p = n/sum(n,na.rm = TRUE))\n}\n\npenguin_summary(grp_var = species,num_var = body_mass_g)\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 6 x 5\n# Groups:   species [3]\n  species   sex        n mean_body_mass_g     p\n  <fct>     <fct>  <int>            <dbl> <dbl>\n1 Adelie    female    73            3369. 0.5  \n2 Adelie    male      73            4043. 0.5  \n3 Chinstrap female    34            3527. 0.5  \n4 Chinstrap male      34            3939. 0.5  \n5 Gentoo    female    58            4680. 0.487\n6 Gentoo    male      61            5485. 0.513\n\n\nNow that we’ve finished our function, what if we want to make it even more generalized? For example, pass multiple variables in a single argument, for this we wil use the help of an old friend."
  }
]