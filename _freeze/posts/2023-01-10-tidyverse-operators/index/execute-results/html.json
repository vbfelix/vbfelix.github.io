{
  "hash": "d390826f7a4fe8087220a0e5134c33cb",
  "result": {
    "markdown": "---\ntitle: \"An intro to tidyverse operators\"\nauthor: \"Vinícius Félix\"\ndate: \"2023-01-10\"\ncategories: [Intro to, Tools, R]\nimage: \"intro-to-tidyverse-operators.png\"\n---\n\n\nIn this post of the series **Intro to**, I'll give an introduction to the tidyverse operators and how we can make functions with them.\n\n\n::: {.cell}\n\n:::\n\n\n# Context\n\nThe [tidyverse](https://www.tidyverse.org/) is an ecosystem of R packages the revolutionized how data is handled in the language. It provides amazing and famous libraries such as [dplyr](https://dplyr.tidyverse.org/) and [ggplot2](https://ggplot2.tidyverse.org/), that have great functions, e.g., we covered the [across](https://vbfelix.github.io/posts/2023-01-01-dplyr-across/) function from [dplyr](https://dplyr.tidyverse.org/).\n\nBut, we can have the need to create our own functions using this functions inside them,, and a problem may surge as the tidyverse works based on a dataframe, and how to pass the arguments can be a issue.\n\nSo, to make it easier to create this functions, some special operators were created, in a way that we can pass an input as an argument to functions that will work based on a dataframe, even if we just pass the column name.\n\nFirst of all, let's do something in tidyverse:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n\npenguins %>% \n  filter(!is.na(sex)) %>% \n  group_by(species,sex) %>%\n  summarise(\n    n = n(),\n    mean_body_mass_g = mean(body_mass_g,na.rm = TRUE),\n    .groups = \"drop_last\"\n    ) %>% \n  group_by(species) %>% \n  mutate(p = n/sum(n,na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 5\n# Groups:   species [3]\n  species   sex        n mean_body_mass_g     p\n  <fct>     <fct>  <int>            <dbl> <dbl>\n1 Adelie    female    73            3369. 0.5  \n2 Adelie    male      73            4043. 0.5  \n3 Chinstrap female    34            3527. 0.5  \n4 Chinstrap male      34            3939. 0.5  \n5 Gentoo    female    58            4680. 0.487\n6 Gentoo    male      61            5485. 0.513\n```\n:::\n:::\n\n\nIn the example above we used the dataframe `penguins`, where we did some actions:\n\n-   Removed the observations with missing values for the variable `sex`;\n\n-   Computed the count of penguin's, by `species` and `sex`;\n\n-   Computed the mean of the penguin's body mass (in grams), by `species` and `sex`;\n\n-   Computed the proportion of the penguin's `sex`, by `species`.\n\nOk, that was very simple and effective, but what if we want to transform this in a function called `penguin_summary`?\n\n# Operators\n\n## {{}} Curly-curly\n\nThe first operator we will learn is the `curly-curly`, using the command `{{}}`, the goal of this operator is to allow us to have an argument passed to our function refering to a column inside a dataframe.\n\nSo, we will create the function `penguin_summary`, where the variable used to count the penguins, in the example before `species`, we will be generalized ny the argument `grp_var`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_summary <- function(grp_var){\n  penguins %>% \n  filter(!is.na(sex)) %>% \n  group_by({{grp_var}},sex) %>%\n  summarise(\n    n = n(),\n    mean_body_mass_g = mean(body_mass_g,na.rm = TRUE)\n    ) %>% \n  group_by({{grp_var}}) %>% \n  mutate(p = n/sum(n,na.rm = TRUE))\n}\n```\n:::\n\n\nWe can see that inside the `dplyr` verbs we write the argument `grp_var` inside the operator `{{}}`.\n\nLet's now apply the variable `species` to see if the result is the same as before.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_summary(grp_var = species)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 5\n# Groups:   species [3]\n  species   sex        n mean_body_mass_g     p\n  <fct>     <fct>  <int>            <dbl> <dbl>\n1 Adelie    female    73            3369. 0.5  \n2 Adelie    male      73            4043. 0.5  \n3 Chinstrap female    34            3527. 0.5  \n4 Chinstrap male      34            3939. 0.5  \n5 Gentoo    female    58            4680. 0.487\n6 Gentoo    male      61            5485. 0.513\n```\n:::\n:::\n\n\nYes! We got the same result, but there are is also another interesting fact, the variable `species` was passed without quotes, so no need to use functions such as `quo`, `enquote`, etc. And now we can pass other variable to our function, let's give it a try.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_summary(grp_var = island)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'island'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 5\n# Groups:   island [3]\n  island    sex        n mean_body_mass_g     p\n  <fct>     <fct>  <int>            <dbl> <dbl>\n1 Biscoe    female    80            4319. 0.491\n2 Biscoe    male      83            5105. 0.509\n3 Dream     female    61            3446. 0.496\n4 Dream     male      62            3987. 0.504\n5 Torgersen female    24            3396. 0.511\n6 Torgersen male      23            4035. 0.489\n```\n:::\n:::\n\n\nOk, after generalizing the `species` variable, we will do the same for the `body_mass_g` creating another argument, `num_var`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_summary <- function(grp_var,num_var){\n  penguins %>% \n  filter(!is.na(sex)) %>% \n  group_by({{grp_var}},sex) %>%\n  summarise(\n    n = n(),\n    mean = mean({{num_var}},na.rm = TRUE)\n    ) %>% \n  group_by({{grp_var}}) %>% \n  mutate(p = n/sum(n,na.rm = TRUE))\n}\n\npenguin_summary(grp_var = species,num_var = body_mass_g)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 5\n# Groups:   species [3]\n  species   sex        n  mean     p\n  <fct>     <fct>  <int> <dbl> <dbl>\n1 Adelie    female    73 3369. 0.5  \n2 Adelie    male      73 4043. 0.5  \n3 Chinstrap female    34 3527. 0.5  \n4 Chinstrap male      34 3939. 0.5  \n5 Gentoo    female    58 4680. 0.487\n6 Gentoo    male      61 5485. 0.513\n```\n:::\n:::\n\n\nOkay, we kind of succeeded, but we had to give the new variable for the mean a generic name; to make this dynamic, we'll need the assistance of another operator.\n\n## := Walrus\n\nThe second operator is the `walrus`, using the command `:=`, the goal of this the operator is to allow us to create new variables using the argument dynamically in the name of the variable created.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_summary <- function(grp_var,num_var){\n  penguins %>% \n  filter(!is.na(sex)) %>% \n  group_by({{grp_var}},sex) %>%\n  summarise(\n    n = n(),\n    \"mean_{{num_var}}\" := mean({{num_var}},na.rm = TRUE)\n    ) %>% \n  group_by({{grp_var}}) %>% \n  mutate(p = n/sum(n,na.rm = TRUE))\n}\n\npenguin_summary(grp_var = species,num_var = body_mass_g)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 5\n# Groups:   species [3]\n  species   sex        n mean_body_mass_g     p\n  <fct>     <fct>  <int>            <dbl> <dbl>\n1 Adelie    female    73            3369. 0.5  \n2 Adelie    male      73            4043. 0.5  \n3 Chinstrap female    34            3527. 0.5  \n4 Chinstrap male      34            3939. 0.5  \n5 Gentoo    female    58            4680. 0.487\n6 Gentoo    male      61            5485. 0.513\n```\n:::\n:::\n\n\nNow that we've finished our function, what if we want to make it even more generalized? For example, pass multiple variables in a single argument, for this we wil use the help of an old friend.\n\n# Across\n\nSo we talk more about `across`, because it allows together with `curly-curly` operator to pass multiple variables into one argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_summary <- function(grp_var,num_var){\n  penguins %>% \n  filter(!is.na(sex)) %>% \n  group_by(across({{grp_var}}),sex) %>%\n  summarise(\n    n = n(),\n    \"mean_{{num_var}}\" := mean({{num_var}},na.rm = TRUE)\n    ) %>% \n  group_by(across({{grp_var}})) %>% \n  mutate(p = n/sum(n,na.rm = TRUE))\n}\n\npenguin_summary(grp_var = c(species, island),num_var = body_mass_g)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'species', 'island'. You can override using\nthe `.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 x 6\n# Groups:   species, island [5]\n   species   island    sex        n mean_body_mass_g     p\n   <fct>     <fct>     <fct>  <int>            <dbl> <dbl>\n 1 Adelie    Biscoe    female    22            3369. 0.5  \n 2 Adelie    Biscoe    male      22            4050  0.5  \n 3 Adelie    Dream     female    27            3344. 0.491\n 4 Adelie    Dream     male      28            4046. 0.509\n 5 Adelie    Torgersen female    24            3396. 0.511\n 6 Adelie    Torgersen male      23            4035. 0.489\n 7 Chinstrap Dream     female    34            3527. 0.5  \n 8 Chinstrap Dream     male      34            3939. 0.5  \n 9 Gentoo    Biscoe    female    58            4680. 0.487\n10 Gentoo    Biscoe    male      61            5485. 0.513\n```\n:::\n:::\n\n\nNow we passed both `species` and `island` variables to `group_by`, but to do the same to the `num_var` we can benefit from `across` arguments, as we saw in our post [An intro to dplyr::across](https://vbfelix.github.io/posts/2023-01-01-dplyr-across/).\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_summary <- function(grp_var,num_var){\n  penguins %>% \n  filter(!is.na(sex)) %>% \n  group_by(across({{grp_var}}),sex) %>%\n  summarise(\n    n = n(),\n    across(.cols = {{num_var}},.fns = ~mean(.,na.rm = TRUE),.names = \"mean_{.col}\")\n    ) %>% \n  group_by(across({{grp_var}})) %>% \n  mutate(p = n/sum(n,na.rm = TRUE))\n}\n\npenguin_summary(grp_var = species,num_var = c(body_mass_g,bill_depth_mm))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 6\n# Groups:   species [3]\n  species   sex        n mean_body_mass_g mean_bill_depth_mm     p\n  <fct>     <fct>  <int>            <dbl>              <dbl> <dbl>\n1 Adelie    female    73            3369.               17.6 0.5  \n2 Adelie    male      73            4043.               19.1 0.5  \n3 Chinstrap female    34            3527.               17.6 0.5  \n4 Chinstrap male      34            3939.               19.3 0.5  \n5 Gentoo    female    58            4680.               14.2 0.487\n6 Gentoo    male      61            5485.               15.7 0.513\n```\n:::\n:::\n\n\nWe can now compute the mean for multiple numeric variables and also group by any number of variables we want:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_summary(grp_var = c(species,island),num_var = c(body_mass_g,bill_depth_mm))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'species', 'island'. You can override using\nthe `.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 x 7\n# Groups:   species, island [5]\n   species   island    sex        n mean_body_mass_g mean_bill_depth_mm     p\n   <fct>     <fct>     <fct>  <int>            <dbl>              <dbl> <dbl>\n 1 Adelie    Biscoe    female    22            3369.               17.7 0.5  \n 2 Adelie    Biscoe    male      22            4050                19.0 0.5  \n 3 Adelie    Dream     female    27            3344.               17.6 0.491\n 4 Adelie    Dream     male      28            4046.               18.8 0.509\n 5 Adelie    Torgersen female    24            3396.               17.6 0.511\n 6 Adelie    Torgersen male      23            4035.               19.4 0.489\n 7 Chinstrap Dream     female    34            3527.               17.6 0.5  \n 8 Chinstrap Dream     male      34            3939.               19.3 0.5  \n 9 Gentoo    Biscoe    female    58            4680.               14.2 0.487\n10 Gentoo    Biscoe    male      61            5485.               15.7 0.513\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}