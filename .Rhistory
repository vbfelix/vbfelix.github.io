)
dice_weight <- function(x){
case_when(
x == 2  ~ 1,
x == 3  ~ 2,
x == 4  ~ 3,
x == 5  ~ 4,
x == 6  ~ 5,
x == 7  ~ 6,
x == 8  ~ 5,
x == 9  ~ 4,
x == 10 ~ 3,
x == 11 ~ 2,
x == 12 ~ 1,
TRUE ~ 0
)
}
catan_or <- read.csv("catanstats.csv")
catan_df <-
catan_or %>%
rename(
dice_02 = X2,
dice_03 = X3,
dice_04 = X4,
dice_05 = X5,
dice_06 = X6,
dice_07 = X7,
dice_08 = X8,
dice_09 = X9,
dice_10 = X10,
dice_11 = X11,
dice_12 = X12,
set1_l1_num = settlement1,
set1_l1_res = X,
set1_l2_num = X.1,
set1_l2_res = X.2,
set1_l3_num = X.3,
set1_l3_res = X.4,
set2_l1_num = settlement2,
set2_l1_res = X.5,
set2_l2_num = X.6,
set2_l2_res = X.7,
set2_l3_num = X.8,
set2_l3_res = X.9
) %>%
#winner
group_by(gameNum) %>%
mutate(winner = if_else(points == max(points), "Winner", "Loser")) %>%
ungroup() %>%
#settlement weight
mutate(
across(.cols = ends_with("_num"),~ifelse(is.na(.),0,.)),
across(.cols = ends_with("_num"),dice_weight),
set1_weight = set1_l1_num + set1_l2_num + set1_l3_num,
set2_weight = set2_l1_num + set2_l2_num + set2_l3_num,
set_weight = set1_weight + set2_weight
)
catan_df %>%
group_by(gameNum) %>%
summarise(
set_weight[winner == "Winner"] - max(set_weight,na.rm = TRUE)
)
catan_df %>%
group_by(gameNum) %>%
summarise(
diff = set_weight[winner == "Winner"] - max(set_weight,na.rm = TRUE)
)
catan_df %>%
group_by(gameNum) %>%
summarise(
diff = set_weight[winner == "Winner"] - max(set_weight,na.rm = TRUE)
) %>%
count(diff)
catan_df %>%
group_by(gameNum) %>%
summarise(
diff = set_weight[winner == "Winner"] - max(set_weight,na.rm = TRUE)
) %>%
count(diff)
catan_df %>% count(me)
catan_df %>% count(me,winner)
}
my_fun <- function(df, groupby1, groupby2, string1, string2, beta) {
df %>%
group_by({{groupby1}}, {{groupby2}}) %>%
mutate(new_value=
slider_helper(
slide(cur_data()[, c({{string1}}, {{string2}}], ~.x, .before = Inf, .after = -1),
cur_data()[[{{string2}}]],
{{string1}},
beta)))
}
source("~/.active-rstudio-document", echo=TRUE)
my_fun <- function(df, groupby1, groupby2, string1, string2, beta) {
df %>%
group_by({{groupby1}}, {{groupby2}}) %>%
mutate(new_value=
slider_helper(
slide(cur_data()[, c({{string1}}, {{string2}}], ~.x, .before = Inf, .after = -1),
cur_data()[[{{string2}}]],
{{string1}},
beta)))
}
my_fun <-
function(df, groupby1, groupby2, string1, string2, beta) {
df %>%
group_by({{groupby1}}, {{groupby2}}) %>%
mutate(new_value=
slider_helper(
slide(cur_data()[, c({{string1}}, {{string2}}], ~.x, .before = Inf, .after = -1),
cur_data()[[{{string2}}]],
{{string1}},
beta)))
}
df <-
read.table(
text = "Col1      Col2     Col3
listerine DB0076
listerine DB0076
nicotine  Acetate  DB0071"
)
df <-
read.table(
text = "Col1      Col2     Col3
listerine DB0076 NA
listerine DB0076 NA
nicotine  Acetate  DB0071"
)
d
df
df <-
read.table(
text = "Col1      Col2     Col3
listerine DB0076 NA
listerine DB0076 NA
nicotine  Acetate  DB0071", header = T
)
df
dput(data)
df <-
structure(list(Variable = c("x1", "x2", "x3"),
Coefficients_se1 = c("0.04 (0.03)",
"", ""),
Coefficients_se2 = c("", "0.08*** (0.01)", ""), Coefficients_se3 = c("",
"", "0.02* (0.01)")), class = "data.frame", row.names = c(NA,
-3L))
df
dput(df)
df <-
read.table(
text = "Col1      Col2     Col3
listerine DB0076 NA
listerine DB0076 NA
nicotine  Acetate  DB0071", header = T
)
dput(df)
df <-
structure(list(Col1 = c("listerine", "listerine", "nicotine"),
Col2 = c("DB0076", "DB0076", "Acetate"),
Col3 = c(NA, NA,"DB0071")), class = "data.frame", row.names = c(NA, -3L))
df
library(dplyr)
library(stringr)
df %>%
mutate(
Col1 = if_else(!str_detect(Col2,"DB"), paste(Col1,Col2))
)
df %>%
mutate(
Col1 = if_else(!str_detect(Col2,"DB"), paste(Col1,Col2),COl1)
)
source("~/.active-rstudio-document", echo=TRUE)
df %>%
mutate(
Col1 = if_else(!str_detect(Col2,"DB"), paste(Col1,Col2),Col1),
Col2 = if_else(!str_detect(Col2,"DB"), Col3,Col2)
) %>%
select(-Col3)
x = data.frame(genes = c("a", "b", "c"),
pval1 = c(0.0003, NA, NA),
pval2 = c(0.008, NA, 0.2),
pval3 = c(0.0009, 0.000007, 0.000001) )
x
quarto create extension filter
df <-
read.table(
header = TRUE,
text =
" DateTime       Depth  Temp
18/07/2010 12:00  0.00  22.2
18/07/2010 12:00  0.50  21.1
18/07/2010 12:00  1.00  21.8
18/07/2010 12:00  1.50  22.8
18/07/2010 12:00  2.00  22.0
18/07/2010 12:00  2.50  19.7
18/07/2010 12:00  3.00  16.6
18/07/2010 12:00  3.50  12.5
18/07/2010 12:00  4.00   9.3
18/07/2010 12:00  4.50   7.6"
)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
df <-
read.table(
header = TRUE,
text =
"DateTime Depth Temp
18/07/2010 12:00  0.00  22.2
18/07/2010 12:00  0.50  21.1
18/07/2010 12:00  1.00  21.8
18/07/2010 12:00  1.50  22.8
18/07/2010 12:00  2.00  22.0
18/07/2010 12:00  2.50  19.7
18/07/2010 12:00  3.00  16.6
18/07/2010 12:00  3.50  12.5
18/07/2010 12:00  4.00 9.3
18/07/2010 12:00  4.50 7.6"
)
df <-
read.table(
header = TRUE,
text =
"DateTime Depth Temp
18/07/2010-12:00  0.00  22.2
18/07/2010-12:00  0.50  21.1
18/07/2010-12:00  1.00  21.8
18/07/2010-12:00  1.50  22.8
18/07/2010-12:00  2.00  22.0
18/07/2010-12:00  2.50  19.7
18/07/2010-12:00  3.00  16.6
18/07/2010-12:00  3.50  12.5
18/07/2010-12:00  4.00 9.3
18/07/2010-12:00  4.50 7.6"
)
df
library(tidyverse)
df %>%
mutate(DateTime = str_remove(DateTime,"-"))
df %>%
mutate(DateTime = str_remove(DateTime, "-"))
df <-
read.table(
header = TRUE,
text =
"DateTime Depth Temp
18/07/2010-12:00  0.00  22.2
18/07/2010-12:00  0.50  21.1
18/07/2010-12:00  1.00  21.8
18/07/2010-12:00  1.50  22.8
18/07/2010-12:00  2.00  22.0
18/07/2010-12:00  2.50  19.7
18/07/2010-12:00  3.00  16.6
18/07/2010-12:00  3.50  12.5
18/07/2010-12:00  4.00 9.3
18/07/2010-12:00  4.50 7.6"
)
library(stringr)
df %>%
mutate(DateTime = str_replace(DateTime, "-"," "))
library(dplyr)
library(stringr)
df %>%
mutate(DateTime = str_replace(DateTime, "-"," "))
df %>%
mutate(DateTime = str_replace(DateTime, "-"," ")) %>%
dput()
df <-
structure(list(DateTime = c("18/07/2010 12:00", "18/07/2010 12:00",
"18/07/2010 12:00", "18/07/2010 12:00", "18/07/2010 12:00", "18/07/2010 12:00",
"18/07/2010 12:00", "18/07/2010 12:00", "18/07/2010 12:00", "18/07/2010 12:00"
), Depth = c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5), Temp = c(22.2,
21.1, 21.8, 22.8, 22, 19.7, 16.6, 12.5, 9.3, 7.6)), class = "data.frame", row.names = c(NA,
-10L))
df
df %>%
mutate(as.Date.POSIXct(DateTime))
df
df %>%
mutate(as.Date(DateTime))
df %>%
mutate(as.Date(DateTime)) %>%
print()
df %>%
mutate(as.Date(DateTime))
df %>%
mutate(dmy_hms(DateTime))
library(lubridate)
df %>%
mutate(dmy_hms(DateTime))
df %>%
mutate(DateTime = dmy_hms(DateTime))
df %>%
mutate(DateTime = dmy_hms(DateTime)) %>%
glimpse()
df %>%
mutate(DateTime = format(dmy_hms(DateTime), "%Y/%m/%d %H:%M")) %>%
glimpse()
df %>%
mutate(DateTime = dmy_hms(DateTime)))
df %>%
mutate(DateTime = dmy_hms(DateTime))
df %>%
mutate(
DateTime = dmy_hms(DateTime),
DateTime = format(DateTime,format='%Y%m%d %H:%M')
)
df %>%
mutate(
DateTime = dmy_hms(DateTime),
DateTime = format(DateTime,format='%Y/%m/%d %H:%M')
)
df <-
structure(list(DateTime = c("18/07/2010 12:00", "18/07/2010 12:00",
"18/07/2010 12:00", "18/07/2010 12:00", "18/07/2010 12:00", "18/07/2010 12:00",
"18/07/2010 12:00", "18/07/2010 12:00", "18/07/2010 12:00", "18/07/2010 12:00"
), Depth = c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5), Temp = c(22.2,
21.1, 21.8, 22.8, 22, 19.7, 16.6, 12.5, 9.3, 7.6)), class = "data.frame", row.names = c(NA,
-10L))
df <-
structure(list(DateTime = c("18/07/2010 12:00", "18/07/2010 12:00",
"18/07/2010 12:00", "18/07/2010 12:00", "18/07/2010 12:00", "18/07/2010 12:00",
"18/07/2010 12:00", "18/07/2010 12:00", "18/07/2010 12:00", "18/07/2010 12:00"
),
Depth = c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5),
Temp = c(22.2,21.1, 21.8, 22.8, 22, 19.7, 16.6, 12.5, 9.3, 7.6)), class = "data.frame",
row.names = c(NA, -10L))
df %>%
mutate(
DateTime = dmy_hms(DateTime),
DateTime = format(DateTime,format='%Y/%m/%d %H:%M')
)
df %>%
mutate(
DateTime = dmy_hms(DateTime)
# DateTime = format(DateTime,format='%Y/%m/%d %H:%M')
)
as.POSIXct(df$DateTime)
as.Date.POSIXct(as.POSIXct)
as.Date.POSIXct(df$DateTime)
as.POSIXct.Date(df$DateTime)
as.Date(df$DateTime)
as.POSIXct(df$DateTime,format = "%d/%m/%Y %H:%M")
format(as.POSIXct(df$DateTime,format = "%d/%m/%Y %H:%M"),format='%Y/%m/%d %H:%M')
library(ggplot2)
ggplot()
plot <- ggplot(mtcars,aes(drat,hp))
geom_abline(aes(),slope = 1, intercept = 0)
geom_abline(slope = 1, intercept = 0)
geom_abline(slope = 1, intercept = 0,aes(alpha = "Identity line"))
geom_abline(aes(slope = 1, intercept = 0,alpha = "Identity line"))
geom_abline(aes(slope = 1, intercept = 0,alpha = "Identity line"))+
labs(alpha = "")+
scale_alpha_manual(values = c(1,1))
plt_identity_line <- function(ggplot){
ggplot+
geom_abline(aes(slope = 1, intercept = 0,alpha = "Identity line"))+
labs(alpha = "")+
scale_alpha_manual(values = c(1,1))
}
plot %>% plt_identity_line()
ggbeeswarm::geom_quasirandom
?layer
ggplot+
geom_abline(aes(slope = 1, intercept = 0,alpha = "Identity line"), dashed = "line")+
labs(alpha = "")+
scale_alpha_manual(values = c(1,1))
plt_identity_line <- function(ggplot){
ggplot+
geom_abline(aes(slope = 1, intercept = 0,alpha = "Identity line"), linetype = "dashed")+
labs(alpha = "")+
scale_alpha_manual(values = c(1,1))
}
ggplot(mtcars,aes(drat,hp))+
geom_abline(aes(slope = 1, intercept = 0,alpha = "Identity line"), linetype = "dashed")+
labs(alpha = "")+
scale_alpha_manual(values = c(1,1))
ggplot(mtcars,aes(drat,hp))+
geom_point()+
#Identity line
geom_abline(aes(slope = 1, intercept = 0,alpha = "Identity line"), linetype = "dashed")+
labs(alpha = "")+
scale_alpha_manual(values = c(1,1))
ggplot(mtcars,aes(drat,hp))+
geom_point()+
#Identity line
geom_abline(aes(slope = 1, intercept = 0,alpha = "Identity line"), linetype = "dashed")+
labs(alpha = "")+
scale_alpha_manual(values = c(1,1))
ggplot(mtcars,aes(drat,hp))+
geom_point()+
#Identity line
geom_abline(aes(slope = 1, intercept = 0,alpha = "Identity line"), linetype = "dashed", col = "red")+
labs(alpha = "")+
scale_alpha_manual(values = c(1,1))
,mtcars
mtcars
ggplot(mtcars,aes(qsec,mpg))+
geom_point()+
#Identity line
geom_abline(aes(slope = 1, intercept = 0,alpha = "Identity line"), linetype = "dashed", col = "red")+
labs(alpha = "")+
scale_alpha_manual(values = c(1,1))
plt_identity_line <- function(){
geom_abline(aes(slope = 1, intercept = 0,alpha = "Identity line"), linetype = "dashed")+
labs(alpha = "")+
scale_alpha_manual(values = c(1,1))
}
plot <-
ggplot(mtcars,aes(qsec,mpg))+
geom_point()
plot + plt_identity_line()
plt_identity_line <- function(ggplot){
ggplot+
geom_abline(aes(slope = 1, intercept = 0,alpha = "Identity line"), linetype = "dashed")+
labs(alpha = "")+
scale_alpha_manual(values = c(1,1))
}
plt_identity_line(plot)
ggbeeswarm::geom_quasirandom
plt_identity_line <- function(ggplot){
ggplot+
geom_abline(aes(slope = 1, intercept = 0,alpha = "Identity line"), linetype = "dashed")+
labs(alpha = "")+
scale_alpha_manual(values = c(1,1))
}
plt_identity_line(plot)
plt_identity_line <- function(ggplot){
ggplot+
geom_abline(aes(slope = 1, intercept = 0,alpha = "Identity line"), linetype = "dashed", col = "red")+
labs(alpha = "")+
scale_alpha_manual(values = c(1,1))
}
plt_identity_line(plot)
aux <- geom_abline(aes(slope = 1, intercept = 0,alpha = "Identity line"), linetype = "dashed")+
labs(alpha = "")+
scale_alpha_manual(values = c(1,1))
relper::plt_no_labels
relper::plt_flip_y_title
relper::plt_scale_auto
source("~/.active-rstudio-document", echo=TRUE)
paste(List1,List2,sep = "_")
paste(rep(List1,3),List2,sep = "_")
paste(rep(List1,each = 3),List2,sep = "_")
paste(rep(List1,each = length(list2)),List2,sep = "_")
paste(rep(List1,each = length(List2)),List2,sep = "_")
plt_identity_line <- function(){
list(
geom_abline(aes(slope = 1, intercept = 0,alpha = "Identity line"), linetype = "dashed"),
labs(alpha = ""),
scale_alpha_manual(values = c(1,1))
)
}
plot + plt_identity_line()
plt_identity_line <- function(color = "black", linetype = "dashed"){
list(
geom_abline(aes(slope = 1, intercept = 0,alpha = "Identity line"), linetype = linetype, color = color),
labs(alpha = ""),
scale_alpha_manual(values = c(1,1))
)
}
plot + plt_identity_line()
new_summary <- function(df,col1,col2){
df %>%
summarise(
n = n(),
addition = {{col1}} + {{col2}},
multiplication = {{col1}} * {{col2}}
)
}
operations <- function(df,col1,col2){
df %>%
summarise(
n = n(),
addition = {{col1}} + {{col2}},
multiplication = {{col1}} * {{col2}}
)
}
df <- tibble(a = c(1:3), b = c(4:6), c=(7:9), d=c(10:12))
operations(df,a,b)
operations <- function(df,col1,col2){
df %>%
summarise(
n = n(),
addition = {{col1}} + {{col2}},
subtraction = {{col1}} - {{col2}}
multiplication = {{col1}} * {{col2}},
division = {{col1}} / {{col2}}
)
}
operations(df,a,b)
operations <- function(df,col1,col2){
df %>%
summarise(
n = n(),
addition = {{col1}} + {{col2}},
subtraction = {{col1}} - {{col2}}
multiplication = {{col1}} * {{col2}},
division = {{col1}} / {{col2}}
)
}
operations(df,a,b)
operations <- function(df,col1,col2){
df %>%
summarise(
n = n(),
addition = {{col1}} + {{col2}},
subtraction = {{col1}} - {{col2}},
multiplication = {{col1}} * {{col2}},
division = {{col1}} / {{col2}}
)
}
operations(df,a,b)
